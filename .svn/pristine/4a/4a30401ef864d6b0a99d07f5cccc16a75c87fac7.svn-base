'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _toast = require('./../mixins/toast.js');

var _toast2 = _interopRequireDefault(_toast);

var _api = require('./../mixins/api.js');

var _api2 = _interopRequireDefault(_api);

var _util = require('./../mixins/util.js');

var _util2 = _interopRequireDefault(_util);

var _item = require('./../components/item.js');

var _item2 = _interopRequireDefault(_item);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SignInList = function (_wepy$page) {
  _inherits(SignInList, _wepy$page);

  function SignInList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SignInList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SignInList.__proto__ || Object.getPrototypeOf(SignInList)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
      navigationBarTitleText: '签到记录',
      navigationBarBackgroundColor: '#FF5D22',
      navigationBarTextStyle: 'white'
    }, _this.mixins = [_api2.default, _toast2.default, _util2.default], _this.$repeat = { "list": { "com": "item", "props": "listData.sync" } }, _this.$props = { "item": { "xmlns:v-bind": { "value": "", "for": "list", "item": "item", "index": "index", "key": "key" }, "v-bind:options.once": { "value": "options", "for": "list", "item": "item", "index": "index", "key": "key" }, "v-bind:listData.sync": { "value": "item", "type": "item", "for": "list", "item": "item", "index": "index", "key": "key" } } }, _this.$events = {}, _this.components = {
      item: _item2.default
    }, _this.data = {
      list: [],
      page: 1,
      records: '',
      total: '',
      options: {},
      num: 0,
      height: '',
      canLoad: true
    }, _this.methods = {}, _this.events = {
      changeState: function changeState(data) {
        this.list[data.index].return_visit = 1;
        this.list[data.index].remark = data.remark;
        this.list = this.reSort(this.list);
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SignInList, [{
    key: 'onLoad',
    value: function onLoad(options) {
      var _this2 = this;

      // let projectId = wepy.getStorageSync('sign_project_id')
      var h = wx.getSystemInfoSync().windowHeight;
      var data = {
        page: 1,
        pagesize: 10,
        base_id: options.base_id,
        riding_id: options.riding_id
      };
      this.getSignList(data).then(function (res) {
        console.log('list', res.data.data);
        if (res.data.data) {
          var _data = res.data.data;
          _this2.list = _this2.reSort(_data);
          _this2.num = res.data.dataReserve1;
          _this2.records = res.data.records;
          _this2.total = res.data.total;
          _this2.options = options;
          _this2.height = h;
          _this2.$apply();
        } else {
          _this2.selfToast('暂无数据,请重试', 'none', 2000);
          _this2.hideToast();
          _this2.height = h;
          _this2.$apply();
        }
      });
    }
  }, {
    key: 'onReachBottom',


    // 上拉加载更多
    value: function onReachBottom() {
      var _this3 = this;

      console.log(22);
      var that = this;
      that.showToast();
      var options = this.options;
      var page = that.page + 1;
      console.log('page', that.page);
      var para = {
        page: page,
        pagesize: 10,
        base_id: options.base_id,
        riding_id: options.riding_id
      };
      if (that.canLoad) {
        that.getSignList(para).then(function (res) {
          console.log(res);
          // 如果有数据
          var data = res.data.data;
          if (data.length > 0) {
            var l = that.list;
            l = l.concat(data);
            console.log('l', l);
            _this3.list = _this3.reSort(l);
            that.page = page;
            that.$apply();
            that.hideToast();
          } else {
            that.canLoad = false;
            that.$apply();
            _this3.selfToast('没有数据了', 'none', 2000);
          }
        });
      } else {
        this.selfToast('没有数据了', 'none', 2000);
      }
    }
  }]);

  return SignInList;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(SignInList , 'pages/signInList'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,