'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _toast = require('./../mixins/toast.js');

var _toast2 = _interopRequireDefault(_toast);

var _api = require('./../mixins/api.js');

var _api2 = _interopRequireDefault(_api);

var _util = require('./../mixins/util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// @connect({
//   num (state) {
//     return state.counter.num
//   },
//   asyncNum (state) {
//     return state.counter.asyncNum
//   },
//   sumNum (state) {
//     return state.counter.num + state.counter.asyncNum
//   }
// })

var Index = function (_wepy$page) {
  _inherits(Index, _wepy$page);

  function Index() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Index);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Index.__proto__ || Object.getPrototypeOf(Index)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
      navigationBarTitleText: '多让运营',
      navigationBarBackgroundColor: '#FF5D22',
      navigationBarTextStyle: 'white'
    }, _this.mixins = [_toast2.default, _api2.default, _util2.default], _this.data = {
      list: [],
      reserve: [],
      options: {}
    }, _this.methods = {
      // 点击签到
      sanCode: function sanCode() {
        this.shareCode();
      },


      // 收订金
      sub: function sub() {
        var re = this.data.reserve;
        this.$navigate('./subscription?data=' + JSON.stringify(re));
      },


      // 查询集采
      querySign: function querySign() {
        // let re = this.data.reserve
        // console.log('re', re)
        // if (re === null || re === undefined || re.length === 0 || re.length > 1) {
        //   this.selfToast('没有负责签到')
        //   return false
        // }
        // this.$navigate(`./signInList?base_id=${re[0].base_id}&riding_id=${re[0].riding_id}&name=${re[0].name}`)
        this.$navigate('./member');
      },


      // 查询订金单
      queryOrder: function queryOrder(e) {
        var id = e.currentTarget.id;
        var type = void 0;
        if (id === 'menu') {
          type = '';
        } else {
          type = id;
        }
        var re = this.data.reserve;
        if (re && re.length > 0) {
          this.$navigate('./review?base_id=' + re[0].base_id + '&riding_id=' + re[0].riding_id + '&name=' + re[0].name + '&type=' + type);
        } else {
          wx.showToast({
            title: '暂时没有信息'
          });
        }
        // this.$navigate('./subList')
      },


      // 集采详情
      groupBuy: function groupBuy() {
        this.$navigate('./groupBuy');
      },


      // 认证审核
      audit: function audit() {
        this.$navigate('./audit');
      },


      // 验房管理
      checkRoomAdmin: function checkRoomAdmin() {
        this.$navigate('./checkRoomAdmin');
      },


      // 退出登录
      logout: function logout() {
        // wepy.setStorageSync('token', '')
        // wepy.setStorageSync('tokenid', '')
        // wepy.setStorageSync('activity_project_id', '')
        _wepy2.default.clearStorageSync();
        this.$redirect('./login');
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Index, [{
    key: 'onLoad',
    value: function onLoad(options) {}
  }, {
    key: 'onShow',
    value: function onShow() {
      var that = this;
      that.activityplan({ 'operType': 0 }).then(function (res) {
        var user = _wepy2.default.getStorageSync('user');
        console.log('user', user);
        that.list = res.data.data;
        that.options = user;
        that.reserve = res.data.dataReserve1;
        console.log('retel', res.data.dataReservel);
        that.$apply();
        console.log('ret', that.reserve);
        // 没有项目的话清空缓存
        if (res.data.data.length === 0) {
          that.selfToast('暂无集采项目！', 'none');
          _wepy2.default.setStorageSync('sign_project_id', '');
          _wepy2.default.setStorageSync('activity_project_id', '');
          that.hideToast();
          return false;
        }
        // 进行权限判断
        // 签到权限
        if (res.data.data[0].oper_type === '1') {
          _wepy2.default.setStorageSync('sign_project_id', res.data.data[0].id);
        } else if (res.data.data[0].oper_type === '2') {
          _wepy2.default.setStorageSync('activity_project_id', res.data.data[0].id);
        } else {
          _wepy2.default.setStorageSync('sign_project_id', res.data.data[0].id);
          _wepy2.default.setStorageSync('activity_project_id', res.data.data[0].id);
        }
        // res.data.data[0].beg_at = res.data.data[0].beg_at.substring(0, 16)
      });

      console.log(this.$wxapp.type, 444);
      if (this.$wxapp.type) {
        this.$wxapp.type = false;
        this.shareCode();
      }
    }
  }]);

  return Index;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(Index , 'pages/index'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,