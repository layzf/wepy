'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _toast = require('./../mixins/toast.js');

var _toast2 = _interopRequireDefault(_toast);

var _api = require('./../mixins/api.js');

var _api2 = _interopRequireDefault(_api);

var _util = require('./../mixins/util.js');

var _util2 = _interopRequireDefault(_util);

var _remark = require('./../components/remark.js');

var _remark2 = _interopRequireDefault(_remark);

var _menu = require('./../components/menu.js');

var _menu2 = _interopRequireDefault(_menu);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SubList = function (_wepy$page) {
  _inherits(SubList, _wepy$page);

  function SubList() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, SubList);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SubList.__proto__ || Object.getPrototypeOf(SubList)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
      navigationBarTitleText: '未签到回访',
      navigationBarBackgroundColor: '#FF5D22',
      navigationBarTextStyle: 'white'
    }, _this.mixins = [_api2.default, _toast2.default, _util2.default], _this.$repeat = {}, _this.$props = { "remark": { "xmlns:v-bind": "", "v-bind:dataList.sync": "listData", "v-bind:dataItem.sync": "checkIndex", "xmlns:v-on": "" }, "menu": { "v-bind:isFilter.sync": "showMask" } }, _this.$events = { "remark": { "v-on:modifyState": "modifyState", "v-on:changeState": "changeState" }, "menu": { "v-on:hideModel": "hideModel", "v-on:changeData": "changeData" } }, _this.components = {
      remark: _remark2.default,
      menu: _menu2.default
    }, _this.data = {
      listData: [],
      page: 1,
      isOver: false,
      showBg: false,
      option: '',
      height: 0,
      showMask: false,
      checkIndex: '',
      remarkOver: '',
      address: [],
      isFilter: false,
      preview: '',
      pickerActive: [], //采集活动期数
      hx_index: 0,
      type: ''
    }, _this.methods = {
      //选择采集活动期数
      bindAgentPickerChange: function bindAgentPickerChange(e) {
        var _this2 = this;

        this.hx_index = e.detail.value;this.$apply();
        var id = this.pickerActive[this.hx_index].id;

        var h = wx.getSystemInfoSync().windowHeight;
        var data = {};
        if (this.type) {
          var user = _wepy2.default.getStorageSync('user');
          data = {
            group_id: user.id,
            base_id: id,
            page: 1,
            pagesize: 10
          };
        } else {
          data = {
            base_id: id,
            page: 1,
            return_visit: 1,
            pagesize: 10
          };
        }
        var options = this.option;
        options.base_id = id;

        this.getEnrollData(data).then(function (res) {
          console.log('res', res);
          _this2.listData = res.data.data;
          _this2.address = res.data.dataReserve2;
          _this2.height = h - 55;
          _this2.$broadcast('getData', res.data.dataReserve2, options);
          _this2.$apply();
        });
      },

      changeState: function changeState() {
        this.showBg = false;
        this.$apply();
      },
      hideModel: function hideModel(e) {
        this.showMask = e;
      },
      modifyState: function modifyState(e, ev) {
        var listData = this.listData;
        listData[this.checkIndex].remark = e; // 备注内容

        listData[this.checkIndex].return_visit = ev; //1:去；2不去

        this.showBg = false;
        this.remarkOver = this.checkIndex;
        this.listData = listData;
        console.log('list', listData);
        this.$apply();
      },
      changeData: function changeData(data) {
        this.listData = data;
        this.showMask = false;
        this.$apply();
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(SubList, [{
    key: 'onLoad',
    value: function onLoad(options) {
      var _this3 = this;

      console.log('op', options);
      var type = options.type;
      this.option = options;
      this.type = options.type;
      this.$apply();

      //渲染采集活动期数
      var token = _wepy2.default.getStorageSync('token');
      var tokenid = _wepy2.default.getStorageSync('tokenid');

      var baseinfoData = {
        token: token,
        tokenid: tokenid
      };

      this.getBaseinfo(baseinfoData).then(function (res) {
        _this3.pickerActive = res.data.data;
        _this3.$apply();
        var h = wx.getSystemInfoSync().windowHeight;
        var data = {};
        if (type) {
          var user = _wepy2.default.getStorageSync('user');
          data = {
            group_id: user.id,
            base_id: _this3.pickerActive[0].id,
            page: 1,
            pagesize: 10
          };
          wx.setNavigationBarTitle({
            title: '参团确认'
          });
        } else {
          data = {
            base_id: options.base_id,
            page: 1,
            return_visit: 1,
            pagesize: 10
          };
          wx.setNavigationBarTitle({
            title: '报名回访'
          });
        }
        _this3.getEnrollData(data).then(function (res) {
          _this3.listData = res.data.data;
          _this3.address = res.data.dataReserve2;
          _this3.height = h - 55;
          _this3.$broadcast('getData', res.data.dataReserve2, options);
          _this3.$apply();
        });
      });
    }
  }, {
    key: 'onShow',
    value: function onShow() {
      var op = this.option;
      this.option = op;
      this.showMask = false;
      this.$apply();
    }
  }, {
    key: 'showFilter',
    value: function showFilter() {
      var mask = this.data.showMask;
      this.showMask = !mask;
      this.$apply();
    }
  }, {
    key: 'remarkData',
    value: function remarkData(e) {
      var _this4 = this;

      var index = e.currentTarget.dataset.index;
      console.log('index', index);
      this.checkIndex = index;
      this.$apply();
      setTimeout(function () {
        _this4.showBg = true;
        _this4.$apply();
      }, 100);
    }
  }, {
    key: 'test',
    value: function test(obj, target) {
      var o = true;
      var t = true;
      if (obj.addr) o = obj.addr === target.addr;
      if (obj.return_visit) t = obj.return_visit === target.return_visit;
      return o === t;
    }

    // 上拉加载更多

  }, {
    key: 'onReachBottom',
    value: function onReachBottom() {
      var _this5 = this;

      var filter = this.listData[0].isFilter;
      var options = this.option;
      var type = options.type;
      var page = this.page + 1;
      var data = {};
      if (type) {
        var user = _wepy2.default.getStorageSync('user');
        data = {
          base_id: options.base_id,
          group_id: user.id,
          page: page,
          pagesize: 10
        };
      } else {
        data = {
          base_id: options.base_id,
          page: page,
          return_visit: 1,
          pagesize: 10
        };
      }
      if (filter) {
        var temp = this.listData[0].filter;
        var pre = this.preview;
        if (pre) {
          var state = this.test(pre, temp);
          if (state) {
            pre.page += 1;
            this.preview = pre;
            data = pre;
          } else {
            temp.page += 1;
            this.preview = temp;
            data = temp;
          }
        } else {
          temp.page += 1;
          this.preview = temp;
          data = temp;
        }
        this.$apply();
      }
      if (!this.isOver) {
        this.getEnrollData(data).then(function (res) {
          var list = _this5.listData;
          var listData = res.data.data;
          if (listData.length === 0) {
            _this5.isOver = true;
          }
          list = list.concat(listData);
          _this5.listData = list;
          _this5.page = page;
          _this5.$apply();
        });
      } else {
        this.selfToast('暂无更多数据', 'none');
      }
    }
  }]);

  return SubList;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(SubList , 'pages/review'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,