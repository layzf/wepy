'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _toast = require('./../mixins/toast.js');

var _toast2 = _interopRequireDefault(_toast);

var _api = require('./../mixins/api.js');

var _api2 = _interopRequireDefault(_api);

var _util = require('./../mixins/util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditSub = function (_wepy$page) {
  _inherits(EditSub, _wepy$page);

  function EditSub() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, EditSub);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EditSub.__proto__ || Object.getPrototypeOf(EditSub)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
      navigationBarTitleText: '填写订金单',
      navigationBarBackgroundColor: '#FF5D22',
      navigationBarTextStyle: 'white'
    }, _this.mixins = [_toast2.default, _api2.default, _util2.default], _this.data = {
      list: [],
      user: {},
      addlist: {}, // 用户地址
      newaddress: {}, //修改后的新地址

      userId: '',
      projectId: '',
      chooseAddressBack: null,
      chooseLinkBack: null
    }, _this.methods = {
      commit: function commit(userId, receiveId, linkId, projectId) {
        var that = this;
        var id = _wepy2.default.getStorageSync('activity_project_id');

        that.commitSub(userId, receiveId, linkId, id).then(function (res) {
          if (res.data.resultCode === 1000) {
            that.$navigate('./pay', { id: res.data.data, price: that.list.projectinfo.so_price });
          } else {
            that.selfToast('请补全信息', 'none');
          }
        });
      },


      // 修改联系人
      editTel: function editTel(id) {
        this.$navigate('./contactList', { 'user_id': id });
      },

      // 去选择联系人
      toAddress: function toAddress(id) {
        this.$navigate('./address', { 'user_id': id });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(EditSub, [{
    key: 'onLoad',
    value: function onLoad(option) {
      var that = this;
      that.userId = option.userId;
      that.projectId = option.projectId;

      var tokenid = _wepy2.default.getStorageSync('tokenid');

      console.log(tokenid, "tokenidtokenidtokenid");
    }
  }, {
    key: 'onShow',
    value: function onShow() {
      var that = this;
      var userId = that.userId;

      var projectId = that.projectId;

      var pages = getCurrentPages();
      var currPage = pages[pages.length - 1];

      console.log('curr', currPage);

      that.getSub(userId, projectId).then(function (res) {
        res.data.data.userlinklist.forEach(function (e) {
          if (e.is_default === 1) {
            that.user = e;
          }
        });

        res.data.data.userreceivelist.forEach(function (e) {
          if (e.is_default === 1) {
            that.addlist = e;
          }
        });

        if (currPage.data.chooseAddressBack) {
          that.newaddress.address_detail = currPage.data.chooseAddressBack.address_detail;
          that.newaddress.door_number = currPage.data.chooseAddressBack.door_number;
        }

        if (currPage.data.chooseLinkBack) {
          console.log('c', currPage.data.chooseLinkBack);
          that.user = currPage.data.chooseLinkBack;
        }
        that.list = res.data.data;
        that.$apply();
      });
    }
  }]);

  return EditSub;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(EditSub , 'pages/EditSub'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVkaXRTdWIuanMiXSwibmFtZXMiOlsiRWRpdFN1YiIsImNvbmZpZyIsIm5hdmlnYXRpb25CYXJUaXRsZVRleHQiLCJuYXZpZ2F0aW9uQmFyQmFja2dyb3VuZENvbG9yIiwibmF2aWdhdGlvbkJhclRleHRTdHlsZSIsIm1peGlucyIsInRvYXN0TWl4aW4iLCJhcGkiLCJ1dGlsIiwiZGF0YSIsImxpc3QiLCJ1c2VyIiwiYWRkbGlzdCIsIm5ld2FkZHJlc3MiLCJ1c2VySWQiLCJwcm9qZWN0SWQiLCJjaG9vc2VBZGRyZXNzQmFjayIsImNob29zZUxpbmtCYWNrIiwibWV0aG9kcyIsImNvbW1pdCIsInJlY2VpdmVJZCIsImxpbmtJZCIsInRoYXQiLCJpZCIsIndlcHkiLCJnZXRTdG9yYWdlU3luYyIsImNvbW1pdFN1YiIsInRoZW4iLCJyZXMiLCJyZXN1bHRDb2RlIiwiJG5hdmlnYXRlIiwicHJpY2UiLCJwcm9qZWN0aW5mbyIsInNvX3ByaWNlIiwic2VsZlRvYXN0IiwiZWRpdFRlbCIsInRvQWRkcmVzcyIsIm9wdGlvbiIsInRva2VuaWQiLCJjb25zb2xlIiwibG9nIiwicGFnZXMiLCJnZXRDdXJyZW50UGFnZXMiLCJjdXJyUGFnZSIsImxlbmd0aCIsImdldFN1YiIsInVzZXJsaW5rbGlzdCIsImZvckVhY2giLCJlIiwiaXNfZGVmYXVsdCIsInVzZXJyZWNlaXZlbGlzdCIsImFkZHJlc3NfZGV0YWlsIiwiZG9vcl9udW1iZXIiLCIkYXBwbHkiLCJwYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDRTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7Ozs7O0lBRXFCQSxPOzs7Ozs7Ozs7Ozs7Ozt3TEFDbkJDLE0sR0FBUztBQUNQQyw4QkFBd0IsT0FEakI7QUFFUEMsb0NBQThCLFNBRnZCO0FBR1BDLDhCQUF3QjtBQUhqQixLLFFBTVRDLE0sR0FBUyxDQUFDQyxlQUFELEVBQWFDLGFBQWIsRUFBa0JDLGNBQWxCLEMsUUFFVEMsSSxHQUFPO0FBQ0xD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QUFTbEMsSUFBVCxDQUFjTyxpQkFBZCxDQUFnQ29DLFdBQTlEO0FBQ0Y7O0FBRUQsWUFBSVQsU0FBU2xDLElBQVQsQ0FBY1EsY0FBbEIsRUFBa0M7QUFDaENzQixrQkFBUUMsR0FBUixDQUFZLEdBQVosRUFBZ0JHLFNBQVNsQyxJQUFULENBQWNRLGNBQTlCO0FBQ0FLLGVBQUtYLElBQUwsR0FBWWdDLFNBQVNsQyxJQUFULENBQWNRLGNBQTFCO0FBQ0Q7QUFDREssYUFBS1osSUFBTCxHQUFZa0IsSUFBSW5CLElBQUosQ0FBU0EsSUFBckI7QUFDQWEsYUFBSytCLE1BQUw7QUFDRCxPQXpCRDtBQTBCUDs7OztFQXJFa0M3QixlQUFLOEIsSTs7a0JBQXJCdEQsTyIsImZpbGUiOiJFZGl0U3ViLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gIGltcG9ydCB3ZXB5IGZyb20gJ3dlcHknXG4gIGltcG9ydCB0b2FzdE1peGluIGZyb20gJy4uL21peGlucy90b2FzdCdcbiAgaW1wb3J0IGFwaSBmcm9tICcuLi9taXhpbnMvYXBpJ1xuICBpbXBvcnQgdXRpbCBmcm9tICcuLi9taXhpbnMvdXRpbCdcblxuICBleHBvcnQgZGVmYXVsdCBjbGFzcyBFZGl0U3ViIGV4dGVuZHMgd2VweS5wYWdlIHtcbiAgICBjb25maWcgPSB7XG4gICAgICBuYXZpZ2F0aW9uQmFyVGl0bGVUZXh0OiAn5aGr5YaZ6K6i6YeR5Y2VJyxcbiAgICAgIG5hdmlnYXRpb25CYXJCYWNrZ3JvdW5kQ29sb3I6ICcjRkY1RDIyJyxcbiAgICAgIG5hdmlnYXRpb25CYXJUZXh0U3R5bGU6ICd3aGl0ZSdcbiAgICB9XG5cbiAgICBtaXhpbnMgPSBbdG9hc3RNaXhpbiwgYXBpLCB1dGlsXVxuXG4gICAgZGF0YSA9IHtcbiAgICAgIGxpc3Q6IFtdLFxuICAgICAgdXNlcjoge30sXG4gICAgICBhZGRsaXN0Ont9LCAvLyDnlKjmiLflnLDlnYBcbiAgICAgIG5ld2FkZHJlc3M6e30sLy/kv67mlLnlkI7nmoTmlrDlnLDlnYBcblxuICAgICAgdXNlcklkOiAnJyxcbiAgICAgIHByb2plY3RJZDogJycsXG4gICAgICBjaG9vc2VBZGRyZXNzQmFjazogbnVsbCxcbiAgICAgIGNob29zZUxpbmtCYWNrOiBudWxsXG4gICAgfVxuXG4gICAgb25Mb2FkKG9wdGlvbikge1xuICAgICAgbGV0IHRoYXQgPSB0aGlzXG4gICAgICB0aGF0LnVzZXJJZCA9IG9wdGlvbi51c2VySWRcbiAgICAgIHRoYXQucHJvamVjdElkID0gb3B0aW9uLnByb2plY3RJZDtcblxuICAgICAgbGV0IHRva2VuaWQgPSB3ZXB5LmdldFN0b3JhZ2VTeW5jKCd0b2tlbmlkJyk7XG5cbiAgICAgIGNvbnNvbGUubG9nKHRva2VuaWQsXCJ0b2tlbmlkdG9rZW5pZHRva2VuaWRcIilcblxuICAgIH1cblxuICAgIG9uU2hvdygpIHtcbiAgICAgICAgICAgIGxldCB0aGF0ID0gdGhpcztcbiAgICAgICAgICAgIGxldCB1c2VySWQgPSB0aGF0LnVzZXJJZDtcblxuICAgICAgICAgICAgbGV0IHByb2plY3RJZCA9IHRoYXQucHJvamVjdElkO1xuXG4gICAgICAgICAgICBsZXQgcGFnZXMgPSBnZXRDdXJyZW50UGFnZXMoKVxuICAgICAgICAgICAgbGV0IGN1cnJQYWdlID0gcGFnZXNbcGFnZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjdXJyJywgY3VyclBhZ2UpXG5cbiAgICAgICAgICAgIHRoYXQuZ2V0U3ViKHVzZXJJZCwgcHJvamVjdElkKS50aGVuKHJlcyA9PiB7XG4gICAgICAgICAgICAgIHJlcy5kYXRhLmRhdGEudXNlcmxpbmtsaXN0LmZvckVhY2goZSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGUuaXNfZGVmYXVsdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgdGhhdC51c2VyID0gZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICByZXMuZGF0YS5kYXRhLnVzZXJyZWNlaXZlbGlzdC5mb3JFYWNoKGUgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlLmlzX2RlZmF1bHQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgIHRoYXQuYWRkbGlzdCA9IGVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pXG5cblxuICAgICAgICAgICAgICBpZiAoY3VyclBhZ2UuZGF0YS5jaG9vc2VBZGRyZXNzQmFjaykge1xuICAgICAgICAgICAgICAgICB0aGF0Lm5ld2FkZHJlc3MuYWRkcmVzc19kZXRhaWwgPSBjdXJyUGFnZS5kYXRhLmNob29zZUFkZHJlc3NCYWNrLmFkZHJlc3NfZGV0YWlsXG4gICAgICAgICAgICAgICAgIHRoYXQubmV3YWRkcmVzcy5kb29yX251bWJlciA9IGN1cnJQYWdlLmRhdGEuY2hvb3NlQWRkcmVzc0JhY2suZG9vcl9udW1iZXJcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChjdXJyUGFnZS5kYXRhLmNob29zZUxpbmtCYWNrKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2MnLGN1cnJQYWdlLmRhdGEuY2hvb3NlTGlua0JhY2spXG4gICAgICAgICAgICAgICAgdGhhdC51c2VyID0gY3VyclBhZ2UuZGF0YS5jaG9vc2VMaW5rQmFja1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRoYXQubGlzdCA9IHJlcy5kYXRhLmRhdGE7XG4gICAgICAgICAgICAgIHRoYXQuJGFwcGx5KClcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIGNvbW1pdCAodXNlcklkLCByZWNlaXZlSWQsIGxpbmtJZCwgcHJvamVjdElkKSB7XG4gICAgICAgIGxldCB0aGF0ID0gdGhpc1xuICAgICAgICBsZXQgaWQgPSB3ZXB5LmdldFN0b3JhZ2VTeW5jKCdhY3Rpdml0eV9wcm9qZWN0X2lkJylcblxuICAgICAgICB0aGF0LmNvbW1pdFN1Yih1c2VySWQsIHJlY2VpdmVJZCwgbGlua0lkLCBpZCkudGhlbihyZXMgPT4ge1xuICAgICAgICAgIGlmIChyZXMuZGF0YS5yZXN1bHRDb2RlID09PSAxMDAwKSB7XG4gICAgICAgICAgICAgIHRoYXQuJG5hdmlnYXRlKCcuL3BheScsIHtpZDogcmVzLmRhdGEuZGF0YSwgcHJpY2U6IHRoYXQubGlzdC5wcm9qZWN0aW5mby5zb19wcmljZX0pXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgdGhhdC5zZWxmVG9hc3QoJ+ivt+ihpeWFqOS/oeaBrycsICdub25lJylcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgIH0sXG5cbiAgICAgIC8vIOS/ruaUueiBlOezu+S6ulxuICAgICAgZWRpdFRlbCAoaWQpIHtcbiAgICAgICAgdGhpcy4kbmF2aWdhdGUoJy4vY29udGFjdExpc3QnLCB7J3VzZXJfaWQnOiBpZH0pXG4gICAgICB9LFxuICAgICAgLy8g5Y676YCJ5oup6IGU57O75Lq6XG4gICAgICB0b0FkZHJlc3MgKGlkKSB7XG4gICAgICAgIHRoaXMuJG5hdmlnYXRlKCcuL2FkZHJlc3MnLCB7J3VzZXJfaWQnOiBpZH0pXG4gICAgICB9XG4gICAgfVxuICB9XG4iXX0=