'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _toast = require('./../mixins/toast.js');

var _toast2 = _interopRequireDefault(_toast);

var _api = require('./../mixins/api.js');

var _api2 = _interopRequireDefault(_api);

var _util = require('./../mixins/util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var menu = function (_wepy$component) {
  _inherits(menu, _wepy$component);

  function menu() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, menu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = menu.__proto__ || Object.getPrototypeOf(menu)).call.apply(_ref, [this].concat(args))), _this), _this.props = {
      isFilter: {
        type: Boolean,
        default: false,
        toWay: true
      }
    }, _this.mixins = [_api2.default, _toast2.default, _util2.default], _this.data = {
      items: [[{ name: '去', val: 1, checked: false }, { name: '不去', val: 2, checked: false }, { name: '无', val: 0, checked: false }], [{ name: '金星路', val: 0, checked: false }, { name: '侯家塘', val: 1, checked: false }, { name: '侯家塘', val: 2, checked: false }, { name: '侯家塘', val: 2, checked: false }], [{ name: '金星路', val: 0, checked: false }, { name: '侯家塘', val: 1, checked: false }, { name: '侯家塘', val: 2, checked: false }, { name: '侯家塘', val: 2, checked: false }, { name: '金星路', val: 0, checked: false }], [{ name: '已签到', val: 0, checked: false }, { name: '没有签到', val: 1, checked: false }]],
      height: 0,
      checked: {},
      address: [],
      option: ''
    }, _this.events = {
      getData: function getData(addr, option) {
        console.log('addr', addr, 'option', option);
        this.address = addr;
        this.option = option;
        this.$apply();
      }
    }, _this.methods = {
      hidModel: function hidModel() {
        console.log("隐藏");
        this.$emit("hideModel", false);
      },

      // 选择
      radioChange: function radioChange(e) {
        var id = parseInt(e.currentTarget.id);
        var val = e.detail.value;
        var check = this.checked;
        if (id == 0) {
          check.go = val;
        } else if (id == 1) {
          check.addr = val;
        } else {
          check.shop = val;
        }
        this.checked = check;
        this.$apply();
      },
      clear: function clear(e) {
        var items = this.items;
        var address = this.address;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = items[0][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var o = _step.value;

            o.checked = false;
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = address[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _o = _step2.value;

            _o.checked = false;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        this.items = items;
        this.address = address;
        this.checked = {};
        this.$apply();
      },
      confirmData: function confirmData() {
        var _this2 = this;

        var check = this.checked;
        var address = this.address;
        var option = this.option;
        // let tip = ''
        // if (!check.go) {
        //   if (option.type) {
        //     tip = '未选择签到'
        //   } else {
        //     tip = '请选择去不去'
        //   }
        // } else if (!check.addr) {
        //   tip = '请选择乘车点'
        // }
        // if (tip) {
        //   wx.showToast({title: tip})
        //   return false
        // }
        if (address.length > 0) {
          var data = {
            base_id: address[0].baseId,
            page: 1,
            pagesize: 10
          };
          if (check.addr) data.riding_id = check.addr;
          if (option.type) {
            var user = _wepy2.default.getStorageSync('user');
            data.group_id = user.id;
          } else {
            data.return_visit = 1;
          }
          if (check.go) data.return_visit = check.go;
          this.getEnrollData(data).then(function (res) {
            console.log('res', res);
            var listData = res.data.data;
            if (listData.length > 0) {
              listData[0].filter = data;
              console.log('data', data);
              listData[0].isFilter = true;
            }
            _this2.$emit('changeData', listData);
          });
        } else {
          wx.showToast({
            title: '暂时没有数据'
          });
        }
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(menu, [{
    key: 'onLoad',
    value: function onLoad() {
      var h = wx.getSystemInfoSync().windowHeight;
      this.height = h - 55;
      console.log('optionmenu', this.isFilter);
      this.$apply();
    }
  }]);

  return menu;
}(_wepy2.default.component);

exports.default = menu;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,