'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _toast = require('./../mixins/toast.js');

var _toast2 = _interopRequireDefault(_toast);

var _api = require('./../mixins/api.js');

var _api2 = _interopRequireDefault(_api);

var _util = require('./../mixins/util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Audit = function (_wepy$page) {
  _inherits(Audit, _wepy$page);

  function Audit() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Audit);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Audit.__proto__ || Object.getPrototypeOf(Audit)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
      navigationBarTitleText: '选择地址',
      navigationBarBackgroundColor: '#FF5D22',
      navigationBarTextStyle: 'white'
    }, _this.mixins = [_toast2.default, _api2.default, _util2.default], _this.data = {
      addressList: [],
      animationData: {},
      user_id: ''
    }, _this.methods = {}, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Audit, [{
    key: 'onLoad',
    value: function onLoad(option) {
      console.log('options', option);
      var that = this;
      var data = {
        user_id: option.user_id,
        page: 1,
        pagesize: 20
      };
      this.getAddress(data).then(function (res) {
        that.addressList = res.data.data;
        that.setData({
          addressList: res.data.data,
          user_id: option.user_id
        });
        that.user_id = option.user_id;
        that.$apply();
        console.log('id', that.user_id);
      });
    }
  }, {
    key: 'onUpdateAddressTap',
    value: function onUpdateAddressTap(event) {
      var data = this.addressList;
      var index = this.getDataSet(event, 'index');
      var item = data[index];
      // let address = encodeURI(this.getDataSet(event, 'address'));
      // console.log(item)
      this.$navigate('./modifyAddress', { data: JSON.stringify(item) });
    }
  }, {
    key: 'doChooseBack',
    value: function doChooseBack(para) {
      console.log('paraparaparapara', para);
      var pages = getCurrentPages();
      var prevPage = [];
      if (pages.length === 5) {
        prevPage = pages[pages.length - 3];
      } else {
        prevPage = pages[pages.length - 2];
      }
      console.log('prevPage', pages);
      prevPage.setData({
        chooseAddressBack: para
      });
      setTimeout(function () {
        var del = 1;
        if (pages.length === 5) {
          del = 2;
        }
        wx.navigateBack({
          delta: del
        });
      }, 500);
    }
  }, {
    key: 'doChooseTap',
    value: function doChooseTap(id, para) {
      console.log('到了这里');
      var that = this;
      var animation = wx.createAnimation({
        duration: 200,
        timingFunction: 'linear'
      });
      that.animation = animation;
      animation.translateX(-140).step();
      var addressList = this.data.addressList;
      addressList.forEach(function (ele) {
        if (ele.id == id) {
          ele.isSelected = true;
        } else {
          ele.isSelected = false;
        }
      });
      that.setData({
        animationData: animation.export(),
        addressList: this.data.addressList
      });
      setTimeout(function () {
        animation.translateX(0).step();
        that.setData({
          animationData: animation.export()
        });
      }, 50);
      that.doChooseBack(para);
    }
  }, {
    key: 'onSelectAddressTap',
    value: function onSelectAddressTap(event) {
      var can_update = this.getDataSet(event, 'can_update');
      var id = this.getDataSet(event, 'id');
      var user_id = this.getDataSet(event, 'user_id');
      var address_type = this.getDataSet(event, 'address_type');
      var para = {};
      if (address_type == 1) {
        var village_name = this.getDataSet(event, 'village_name');
        var img_url = this.getDataSet(event, 'img_url');
        var door_number = this.getDataSet(event, 'door_number');
        para = {
          id: id,
          address_detail: village_name,
          can_update: can_update,
          address_type: address_type,
          village_name: village_name,
          img_url: img_url,
          door_number: door_number,
          hasValue: true,
          user_id: user_id
        };
      }
      if (address_type == 0) {
        var _village_name = this.getDataSet(event, 'village_name');
        var _door_number = this.getDataSet(event, 'door_number');
        para = {
          id: id,
          address_detail: _village_name,
          can_update: can_update,
          address_type: address_type,
          door_number: _door_number,
          hasValue: true,
          user_id: user_id
        };
      }
      this.doChooseTap(id, para);
    }
  }, {
    key: 'showConfirm',
    value: function showConfirm(content, typeFlag, id) {
      console.log('id', id);
      var that = this;
      wx.showModal({
        title: '',
        content: content || '',
        showCancel: true,
        cancelText: '取消',
        cancelColor: '#999999',
        confirmText: '确定',
        confirmColor: '#FF5D22',
        success: function success(res) {
          if (res.confirm) {
            switch (typeFlag) {
              case 'changeDefaultTap':
                that.doDefaultTap(id);
                break;
              case 'onDeleteTap':
                that.doDeleteTap(id);
                break;
            }
          } else if (res.cancel) {
            console.log('用户点击取消');
          }
          // if (res.confirm) {
          //   that.doDefaultTap(id);
          // }
        }
      });
    }
  }, {
    key: 'add',
    value: function add() {
      var user = this.user_id;
      this.$navigate('./addAddress', { user: user });
    }
  }, {
    key: 'doDefaultTap',
    value: function doDefaultTap(id) {
      var that = this;
      this.address_update(id).then(function (res) {
        var addressList = that.addressList;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = addressList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var o = _step.value;

            o.is_default = 0;
            if (o.id == id.id) {
              o.is_default = 1;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }

        that.addressList = addressList;
        that.$apply();
        console.log('addressList', that);
        that.showToasts('设置成功', 'success');
      });
    }
  }, {
    key: 'doDeleteTap',
    value: function doDeleteTap(id) {
      console.log('this', this);
      var that = this;
      this.del_adress(id).then(function (res) {
        that.showToasts('删除成功', 'success', 1000, function () {
          that.$navigate('./address', { user_id: id.user_id });
        });
      });
    }
  }, {
    key: 'changeDefaultTap',
    value: function changeDefaultTap(event) {
      var id = this.getDataSet(event, 'id');
      var user_id = this.getDataSet(event, 'user_id');
      this.showConfirm('确定设置为默认地址吗?', 'changeDefaultTap', { id: id, user_id: user_id });
    }
  }, {
    key: 'onDeleteTap',
    value: function onDeleteTap(event) {
      var id = this.getDataSet(event, 'id');
      var user_id = this.getDataSet(event, 'user_id');
      console.log('这是id');
      console.log(id);
      this.showConfirm('确定删除吗?', 'onDeleteTap', { id: id, user_id: user_id });
    }
  }]);

  return Audit;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(Audit , 'pages/address'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,