'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _toast = require('./../mixins/toast.js');

var _toast2 = _interopRequireDefault(_toast);

var _api = require('./../mixins/api.js');

var _api2 = _interopRequireDefault(_api);

var _util = require('./../mixins/util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var EditSub = function (_wepy$page) {
  _inherits(EditSub, _wepy$page);

  function EditSub() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, EditSub);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = EditSub.__proto__ || Object.getPrototypeOf(EditSub)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
      navigationBarTitleText: '填写订金单',
      navigationBarBackgroundColor: '#FF5D22',
      navigationBarTextStyle: 'white'
    }, _this.mixins = [_toast2.default, _api2.default, _util2.default], _this.data = {
      list: [],
      user: {},
      addlist: {},
      userId: '',
      projectId: '',
      chooseAddressBack: null,
      chooseLinkBack: null
    }, _this.methods = {
      commit: function commit(userId, receiveId, linkId, projectId) {
        var that = this;
        var id = _wepy2.default.getStorageSync('activity_project_id');

        that.commitSub(userId, receiveId, linkId, id).then(function (res) {
          if (res.data.resultCode === 1000) {
            that.$navigate('./pay', { id: res.data.data, price: that.list.projectinfo.so_price });
          } else {
            that.selfToast('请补全信息', 'none');
          }
        });
      },


      // 修改联系人
      editTel: function editTel(id) {
        this.$navigate('./contactList', { 'user_id': id });
      },

      // 去选择联系人
      toAddress: function toAddress(id) {
        this.$navigate('./address', { 'user_id': id });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(EditSub, [{
    key: 'onLoad',
    value: function onLoad(option) {
      var that = this;
      that.userId = option.userId;
      that.projectId = option.projectId;

      var tokenid = _wepy2.default.getStorageSync('tokenid');

      console.log(tokenid, "tokenidtokenidtokenid");
    }
  }, {
    key: 'onShow',
    value: function onShow() {
      var that = this;
      var userId = that.userId;

      var projectId = that.projectId;

      var pages = getCurrentPages();
      var currPage = pages[pages.length - 1];

      console.log('curr', currPage);

      that.getSub(userId, projectId).then(function (res) {
        res.data.data.userlinklist.forEach(function (e) {
          if (e.is_default === 1) {
            that.user = e;
          }
        });

        res.data.data.userreceivelist.forEach(function (e) {
          if (e.is_default === 1) {
            that.addlist = e;
          }
        });

        //console.log(that.addlist,"addlistaddlistaddlistaddlist")

        console.log(currPage.data.chooseAddressBack, "currPage.data.chooseAddressBackcurrPage.data.chooseAddressBack");

        if (currPage.data.chooseAddressBack) {
          res.data.data.userreceivelist[0].village_name = currPage.data.chooseAddressBack.address_detail;
          res.data.data.userreceivelist[0].door_number = currPage.data.chooseAddressBack.door_number;
        }

        if (currPage.data.chooseLinkBack) {
          console.log('c', currPage.data.chooseLinkBack);
          that.user = currPage.data.chooseLinkBack;
        }
        that.list = res.data.data;
        that.$apply();
      });
    }
  }]);

  return EditSub;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(EditSub , 'pages/EditSub'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,