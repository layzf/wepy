'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

var _toast = require('./../mixins/toast.js');

var _toast2 = _interopRequireDefault(_toast);

var _api = require('./../mixins/api.js');

var _api2 = _interopRequireDefault(_api);

var _util = require('./../mixins/util.js');

var _util2 = _interopRequireDefault(_util);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var member = function (_wepy$page) {
  _inherits(member, _wepy$page);

  function member() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, member);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = member.__proto__ || Object.getPrototypeOf(member)).call.apply(_ref, [this].concat(args))), _this), _this.config = {
      navigationBarTitleText: '用户查询',
      navigationBarBackgroundColor: '#FF5D22',
      navigationBarTextStyle: 'white'
    }, _this.mixins = [_toast2.default, _api2.default, _util2.default], _this.data = {
      num: 0,
      list: [],
      title: '我的用户',
      flag: false,
      page: 1,
      search: false,
      height: 0,
      mobile: ''
    }, _this.methods = {
      //拨打电话
      call_mobile: function call_mobile(e) {
        console.log(e, "hah ");
        wx.makePhoneCall({
          phoneNumber: e.currentTarget.dataset.tell
        });
      },
      // 实时查询
      bindPassword: function bindPassword(e) {
        var _this2 = this;

        console.log(e.detail.value);
        var value = e.detail.value;
        if (value && value.length === 11) {
          var data = {
            mobile: value,
            page: 1,
            pagesize: 10
          };
          this.getUser(data).then(function (res) {
            _this2.list = res.data.data;
            _this2.page = 1;
            _this2.mobile = value;
            _this2.search = true;
            _this2.flag = false;
            _this2.num = res.data.records;
            _this2.$apply();
          });
        }
      },
      giveSubscription: function giveSubscription(userId) {
        var that = this;
        var projectId = _wepy2.default.getStorageSync('activity_project_id') || '-1';
        that.getSub(userId, projectId).then(function (res) {
          if (res.data.resultCode === 1001) {
            that.selfToast(res.data.error, 'none');
            return false;
          } else {
            that.$navigate('./EditSub', { 'userId': userId, 'projectId': projectId });
          }
        });
      },
      loadMore: function loadMore() {
        var _this3 = this;

        if (this.flag) {
          wx.showToast({
            title: '没有更多了',
            duration: 1000
          });
          return false;
        }
        var page = this.page;
        page += 1;
        var data = void 0;
        if (this.search) {
          data = {
            mobile: this.mobile,
            page: page,
            pagesize: 10
          };
        } else {
          data = {
            mobile: '',
            page: page,
            pagesize: 10
          };
        }
        this.getUser(data).then(function (res) {
          console.log(res);
          if (res.data.data.length > 0) {
            var list = _this3.list;
            _this3.list = list.concat(res.data.data);
            _this3.page = page;
          } else {
            _this3.flag = true;
            wx.showToast({
              title: '没有更多了'
            });
          }
          _this3.$apply();
        });
      }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(member, [{
    key: 'onShow',
    value: function onShow(options) {
      var _this4 = this;

      // 查询签到用户
      var h = wx.getSystemInfoSync().windowHeight;
      var data = {
        mobile: '',
        page: 1,
        pagesize: 10
      };
      this.getUser(data).then(function (res) {
        console.log(res);
        _this4.list = res.data.data;
        _this4.height = h;
        _this4.num = res.data.records;
        _this4.$apply();
      });
    }
  }]);

  return member;
}(_wepy2.default.page);


Page(require('./../npm/wepy/lib/wepy.js').default.$createPage(member , 'pages/member'));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,