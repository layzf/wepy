'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _wepy = require('./../npm/wepy/lib/wepy.js');

var _wepy2 = _interopRequireDefault(_wepy);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var util = function (_wepy$mixin) {
  _inherits(util, _wepy$mixin);

  function util() {
    _classCallCheck(this, util);

    return _possibleConstructorReturn(this, (util.__proto__ || Object.getPrototypeOf(util)).apply(this, arguments));
  }

  _createClass(util, [{
    key: 'checkPhone',

    // 手机号码正则验证
    value: function checkPhone(tel) {
      console.log(tel);
      if (!/^1[3456789]\d{9}$/.test(tel)) {
        return false;
      }
      return true;
    }
  }, {
    key: 'reSort',
    value: function reSort(arr) {
      var temp = [[], [], []];
      var t = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var o = _step.value;

          if (o.return_visit === 0 && !o.id) {
            temp[0].push(o);
          }
          if (o.return_visit === 1 && !o.id) {
            temp[1].push(o);
          }
          if (o.id) {
            temp[2].push(o);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      t = t.concat(temp[0]).concat(temp[1]).concat(temp[2]);
      return t;
    }

    // 排序

  }, {
    key: 'fixedData',
    value: function fixedData(arr) {}
  }, {
    key: 'partition',
    value: function partition(arr, low, high) {
      var middle = arr[high];
      var i = low - 1;
      for (var j = low; j < high; j++) {
        if (!middle.id) {
          if (!arr[j].id) {
            if (arr[j].return_visit < middle.return_visit) {
              i++;
              this.swap(arr, i, j);
            } else if (arr[j].return_visit === middle.return_visit) {
              if (arr[j].return_visit === 0) {
                if (i < high) {
                  i++;
                  this.swap(arr, i, j);
                }
              } else {}
            }
          } else {}
        }
      }
    }
  }, {
    key: 'swap',
    value: function swap(arr, i, j) {
      var t = arr[j];
      arr[j] = arr[i];
      arr[i] = t;
    }

    // 扫码

  }, {
    key: 'shareCode',
    value: function shareCode() {
      var that = this;
      // 判断是否授权摄像头
      wx.getSetting({
        success: function success(res) {
          // 未授权让用户授权
          if (!res.authSetting['scope.camera']) {
            wx.authorize({
              scope: 'scope.camera',
              success: function success() {
                wx.scanCode({
                  success: function success(res) {
                    that.signInApi(res.result).then(function (data) {
                      console.log(data, 111);
                      var Data = data.data.data;
                      if (data.data.resultCode === 1000) {
                        that.$navigate('./signOk', {
                          user_name: Data.user.user_name,
                          icon: Data.user.icon,
                          village_name: Data.user.villageInfo.village_name,
                          door_number: Data.user.userAut.door_number
                        });
                      } else {
                        console.log(data.data);
                        that.$navigate('./lose', { error: data.data.error });
                      }
                    });
                  }
                });
              },

              // 拒绝授权处理
              fail: function fail() {
                console.log('用户拒绝授权');
              }
            });
          } else {
            wx.scanCode({
              success: function success(res) {
                that.signInApi(res.result).then(function (data) {
                  console.log(data, 111);
                  var Data = data.data.data;
                  console.log(Data);
                  if (data.data.resultCode === 1000) {
                    that.$navigate('./signOk', {
                      user_name: Data.user.user_name,
                      icon: Data.user.icon,
                      village_name: Data.user.villageInfo.village_name,
                      door_number: Data.user.userAut.door_number
                    });
                  } else {
                    console.log(data.data);
                    that.$navigate('./lose', { error: data.data.error });
                  }
                });
              }
            });
          }
        }
      });
    }
  }]);

  return util;
}(_wepy2.default.mixin);

exports.default = util;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,